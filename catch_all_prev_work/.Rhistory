# Remove the rows with column labels
average_bidding <- average_bidding[-1,]
maximum_bidding <- maximum_bidding[-1,]
# Change the data type of columns to integer
numeric_cols <- c("Spend (USD)", "Impressions", "Reach", "Website Clicks",
"Searches", "View Content", "Add to Cart", "Purchase")
average_bidding[, numeric_cols] <- sapply(average_bidding[, numeric_cols], as.integer)
maximum_bidding[, numeric_cols] <- sapply(maximum_bidding[, numeric_cols], as.integer)
# Change the data type of the date column to Date
average_bidding$Date <- as.Date(average_bidding$Date, "%d.%m.%Y")
maximum_bidding$Date <- as.Date(maximum_bidding$Date, "%d.%m.%Y")
# Check for missing values
which(is.na(average_bidding) | average_bidding == "", arr.ind = TRUE)
sum(is.na(average_bidding))
which(is.na(maximum_bidding) | maximum_bidding == "", arr.ind = TRUE)
sum(is.na(maximum_bidding))
# Remove rows with missing values
average_bidding <- average_bidding[-5, ] # 7 Missing Values in this row
maximum_bidding <- maximum_bidding[-5, ] # Removing to balance data
# Check for missing values again
which(is.na(average_bidding) | average_bidding == "", arr.ind = TRUE)
sum(is.na(average_bidding))
which(is.na(maximum_bidding) | maximum_bidding == "", arr.ind = TRUE)
sum(is.na(maximum_bidding))
# Reset the row numbers
rownames(average_bidding) <- 1:nrow(average_bidding)
rownames(maximum_bidding) <- 1:nrow(maximum_bidding)
# Add Day of Week
average_bidding$Weekday <- weekdays(average_bidding$Date)
maximum_bidding$Weekday <- weekdays(maximum_bidding$Date)
average_bidding
maximum_bidding
# Change Campaign Name ***TBD***
average_bidding %>%
mutate('Campaign Name' = ifelse('Campaign Name' == 'Campaign Name', "Average Bidding"))
# Change Campaign Name ***TBD***
average_bidding %>%
mutate('Campaign Name' = ifelse('Campaign Name' == 'Campaign Name', "Average Bidding"))
average_bidding
# Change Campaign Name ***TBD***
average_bidding %>%
mutate('Campaign Name' = ifelse('Campaign Name' == 'Campaign Name', "Average Bidding"))
library(shiny)
source("visualizations.R")
# Define server
server <- function(input, output) {
# Display selected variables
output$var_selected <- renderText({
paste("Selected variables:", paste(input$variables, collapse = ", "))
})
# Display selected funnels
output$funnel_selected <- renderText({
paste("Selected funnels:", paste(input$funnels, collapse = ", "))
})
# Display selected cost KPIs
output$kpi_cost_selected <- renderText({
paste("Selected cost KPIs:", paste(input$kpi_cost, collapse = ", "))
})
# Display selected awareness KPIs
output$kpi_awareness_selected <- renderText({
paste("Selected awareness KPIs:", paste(input$kpi_awareness, collapse = ", "))
})
# Display selected awareness KPIs
output$kpi_awareness_selected <- renderText({
paste("Selected awareness KPIs:", paste(input$kpi_awareness, collapse = ", "))
})
# Display selected interest efficiency KPIs
output$kpi_interest_efficiency_selected <- renderText({
paste("Selected interest efficiency KPIs:", paste(input$kpi_interest_efficiency, collapse = ", "))
})
# Display selected desire efficiency KPIs
output$kpi_desire_efficiency_selected <- renderText({
paste("Selected desire efficiency KPIs:", paste(input$kpi_desire_efficiency, collapse = ", "))
})
# Display selected action KPIs
output$kpi_action_selected <- renderText({
paste("Selected action KPIs:", paste(input$kpi_action, collapse = ", "))
})
# Render Plots
#  output$ctr_plot <- renderPlotly({
#    ctr_plot(data)
#  })
observeEvent(input$kpi_interest_efficiency, {
if ("Click Through Rate" %in% input$kpi_interest_efficiency) {
output$ctr_plot <- renderPlotly({
ctr_plot(data)
})
}
})
}
shiny::shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "A/B Test Dashboard"),
dashboardSidebar(
checkboxGroupInput("variables", "Variables",
choices = c("Reach", "Impressions"),
selected = "Reach"),
checkboxGroupInput("funnels", "Funnels",
choices = c("Raw Funnel", "Retention Funnel", "Cost Funnel", "Conversion Funnel"),
selected = "Raw Funnel"),
checkboxGroupInput("kpi_cost", "Cost Efficiency",
choices = c("Cost per User Reached", "Cost per Click", "Cost per Purchase"),
selected = "Cost per User Reached"),
checkboxGroupInput("kpi_awareness", "Awareness",
choices = c("Total Impressions", "Total Reach", "Reach per Impression"),
selected = "Total Impressions"),
checkboxGroupInput("kpi_interest", "Interest Efficiency",
choices = c("Click Through Rate", "Clicks per Impression", "Clicks per User Reached"),
selected = "Click Through Rate"),
checkboxGroupInput("kpi_desire", "Desire Efficiency",
choices = c("Product View to Purchase", "Product View to Add to Cart", "Search to Purchase", "Search to Add to Cart"),
selected = "Product View to Purchase"),
checkboxGroupInput("kpi_action", "Action",
choices = c("Users Reached to Purchase", "Clicks to Purchase"),
selected = "Users Reached to Purchase")
),
dashboardBody(
fluidRow(
box(title = "Overview - Variables", width = 6,
textOutput("var_selected")),
box(title = "Funnels", width = 6,
textOutput("funnel_selected")),
box(title = "KPIs - Cost Efficiency", width = 6,
textOutput("kpi_cost_selected")),
box(title = "KPIs - Awareness", width = 6,
textOutput("kpi_awareness_selected")),
box(title = "KPIs - Interest Efficiency", width = 6,
textOutput("kpi_interest_selected")),
box(title = "KPIs - Desire Efficiency", width = 6,
textOutput("kpi_desire_selected")),
box(title = "KPIs - Action", width = 6,
textOutput("kpi_action_selected")),
box(title = "About this app", width = 6),
box(title = "About the Author", width = 6),
box(width = 12, height = 800)
)
)
)
library(shiny)
source("visualizations.R")
# Define server
server <- function(input, output) {
# Display selected variables
output$var_selected <- renderText({
paste("Selected variables:", paste(input$variables, collapse = ", "))
})
# Display selected funnels
output$funnel_selected <- renderText({
paste("Selected funnels:", paste(input$funnels, collapse = ", "))
})
# Display selected cost KPIs
output$kpi_cost_selected <- renderText({
paste("Selected cost KPIs:", paste(input$kpi_cost, collapse = ", "))
})
# Display selected awareness KPIs
output$kpi_awareness_selected <- renderText({
paste("Selected awareness KPIs:", paste(input$kpi_awareness, collapse = ", "))
})
# Display selected awareness KPIs
output$kpi_awareness_selected <- renderText({
paste("Selected awareness KPIs:", paste(input$kpi_awareness, collapse = ", "))
})
# Display selected interest efficiency KPIs
output$kpi_interest_efficiency_selected <- renderText({
paste("Selected interest efficiency KPIs:", paste(input$kpi_interest_efficiency, collapse = ", "))
})
# Display selected desire efficiency KPIs
output$kpi_desire_efficiency_selected <- renderText({
paste("Selected desire efficiency KPIs:", paste(input$kpi_desire_efficiency, collapse = ", "))
})
# Display selected action KPIs
output$kpi_action_selected <- renderText({
paste("Selected action KPIs:", paste(input$kpi_action, collapse = ", "))
})
# Render Plots
#  output$ctr_plot <- renderPlotly({
#    ctr_plot(data)
#  })
observeEvent(input$kpi_interest_efficiency, {
if ("Click Through Rate" %in% input$kpi_interest_efficiency) {
output$ctr_plot <- renderPlotly({
ctr_plot(data)
})
}
})
}
shiny::shinyApp(ui = ui, server = server)
# Change Campaign Name ***TBD***
average_bidding %>%
mutate('Campaign Name' = ifelse('Campaign Name' == 'Campaign Name', "Average Bidding"))
# Change Campaign Name ***TBD***
average_bidding %>%
mutate('Campaign Name' = ifelse('Campaign Name' == 'Campaign Name', "Average Bidding"))
# Total Spend
combined_data %>%
filter(variable == "Spend (USD)") %>%
group_by(group) %>%
summarise(sum_spend = sum(value))
# Conversion Cost Dataframe
conversion_rate_2 <- combined_data %>%
group_by(group, variable) %>%
summarise(sum = sum(value)) %>%
mutate(conversion_rate = ifelse(variable != "Spend (USD)",sum(sum[variable == "Spend (USD)"]), NA) / sum,
conversion_rate = round(conversion_rate, 2)) %>%
filter(variable != "Spend (USD)")
# Barchart of Cost per Instance
conversion_rate_2 %>%
ggplot(aes(x = reorder(variable,sum),
y = sum,
fill = group)) +
geom_bar(stat = "identity",
position = "dodge") +
labs(x = "",
y = "Conversion Rate",
title = "Count") +
theme(legend.title = element_blank()) +
coord_flip() +
geom_text(aes(label = formatC(formatC(conversion_rate_2$sum, format="f", big.mark=",", digits=0),
format="f",
big.mark=",",
digits=0)),
position = position_dodge(width = 1),
vjust = 0.5, size = 3,
hjust = 0) +
theme(
# axis.text.x = element_text(),
axis.text.x = element_blank(),
# axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
plot.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()) +
labs(fill = "") +
expand_limits(y = c(0, max(conversion_rate_2$sum)*1.3))
# Conversion Cost Dataframe
conversion_rate_2 <- combined_data %>%
group_by(group, variable) %>%
summarise(sum = sum(value)) %>%
mutate(conversion_rate = ifelse(variable != "Spend (USD)",sum(sum[variable == "Spend (USD)"]), NA) / sum,
conversion_rate = round(conversion_rate, 2)) %>%
filter(variable != "Spend (USD)")
# Barchart of Cost per Instance
conversion_rate_2 %>%
ggplot(aes(x = reorder(variable, conversion_rate), y = conversion_rate, fill = group)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent) +
labs(x = "",
y = "Conversion Rate",
title = "Cost per Instance") +
theme(legend.title = element_blank()) +
coord_flip() +
geom_text(aes(label = paste0("$",conversion_rate)),
position = position_dodge(width = 1), vjust = 0.5, size = 3, hjust = -.1) +
theme(
# axis.text.x = element_text(),
axis.text.x = element_blank(),
# axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
plot.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()) +
labs(fill = "") +
expand_limits(y = c(0, max(conversion_rate_2$conversion_rate)*1.15))
conversion_rate_2 =
combined_data %>%
filter(variable != 'Spend (USD)') %>%
group_by(group, variable) %>%
summarise(sum = sum(value)) %>%
arrange(desc(sum)) %>%
mutate(conversion_rate = (sum / lag(sum)))
# Create a vector of levels in the desired order
level_order <- rev(c("Spend (USD)", "Impressions", "Reach", "Website Clicks", "Searches", "View Content", "Add to Cart", "Purchase"))
# Convert the 'variable' column to an ordered factor with the specified levels
conversion_rate_2$variable <- factor(conversion_rate_2$variable, levels = level_order, ordered = TRUE)
# Plot the data
conversion_rate_2 %>%
ggplot(aes(x = variable, y = conversion_rate, fill = group)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent) +
labs(x = "",
y = "Conversion Rate",
title = "Retention per Step") +
theme(legend.title = element_blank()) +
coord_flip() +
geom_text(aes(label = scales::percent(conversion_rate, accuracy = 1)),
position = position_dodge(width = 1), vjust = 0.5, size = 3, hjust = -.1) +
theme(
# axis.text.x = element_text(),
axis.text.x = element_blank(),
# axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
plot.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()) +
labs(fill = "") +
expand_limits(y = c(0, max(conversion_rate_2$conversion_rate)*1.2))
shiny::shinyApp(ui = ui, server = server)
# Load Libraries
list.files()
library(tidyr)
library(dplyr)
library(scales)
library(plotly)
library(ggplot2)
library(forcats)
library(reshape2)
library(gridExtra)
library(tidyverse)
# ----------------- Raw Data
average_bidding <- read.csv("/Users/samuelminer/Downloads/7 R.R/*R-Project/R-Shiny-App----A-B-Test-Analysis/control_group.csv",
sep = ";",
header = F)
maximum_bidding <- read.csv("/Users/samuelminer/Downloads/7 R.R/*R-Project/R-Shiny-App----A-B-Test-Analysis/test_group.csv",
sep = ";",
header = F)
# ----------------- Cleaning
# Column Names Vector
column_names <- c("Campaign Name",
"Date",
"Spend (USD)",
"Impressions",
"Reach",
"Website Clicks",
"Searches",
"View Content",
"Add to Cart",
"Purchase")
# Change Column Names
colnames(maximum_bidding) <- column_names
colnames(average_bidding) <- column_names
# Remove the rows with column labels
average_bidding <- average_bidding[-1,]
maximum_bidding <- maximum_bidding[-1,]
# Change the data type of columns to integer
numeric_cols <- c("Spend (USD)", "Impressions", "Reach", "Website Clicks",
"Searches", "View Content", "Add to Cart", "Purchase")
average_bidding[, numeric_cols] <- sapply(average_bidding[, numeric_cols], as.integer)
maximum_bidding[, numeric_cols] <- sapply(maximum_bidding[, numeric_cols], as.integer)
# Change the data type of the date column to Date
average_bidding$Date <- as.Date(average_bidding$Date, "%d.%m.%Y")
maximum_bidding$Date <- as.Date(maximum_bidding$Date, "%d.%m.%Y")
# Check for missing values
which(is.na(average_bidding) | average_bidding == "", arr.ind = TRUE)
sum(is.na(average_bidding))
which(is.na(maximum_bidding) | maximum_bidding == "", arr.ind = TRUE)
sum(is.na(maximum_bidding))
# Remove rows with missing values
average_bidding <- average_bidding[-5, ] # 7 Missing Values in this row
maximum_bidding <- maximum_bidding[-5, ] # Removing to balance data
# Check for missing values again
which(is.na(average_bidding) | average_bidding == "", arr.ind = TRUE)
sum(is.na(average_bidding))
which(is.na(maximum_bidding) | maximum_bidding == "", arr.ind = TRUE)
sum(is.na(maximum_bidding))
# Reset the row numbers
rownames(average_bidding) <- 1:nrow(average_bidding)
rownames(maximum_bidding) <- 1:nrow(maximum_bidding)
# Add Day of Week
average_bidding$Weekday <- weekdays(average_bidding$Date)
maximum_bidding$Weekday <- weekdays(maximum_bidding$Date)
# ---------- Melt data to new DF
# Melt the data into long format
columns_to_melt <- c("Spend (USD)", "Impressions", "Reach",
"Website Clicks", "Searches", "View Content",
"Add to Cart", "Purchase")
average_bidding_melt <- melt(average_bidding, id.vars = "Date", measure.vars = columns_to_melt)
maximum_bidding_melt <- melt(maximum_bidding, id.vars = "Date", measure.vars = columns_to_melt)
# Add a column indicating the group (average_bidding or maximum_bidding)
average_bidding_melt$group <- "average_bidding"
maximum_bidding_melt$group <- "maximum_bidding"
# Combine the two melted data frames into one data frame
combined_data <- rbind(average_bidding_melt, maximum_bidding_melt)
# Add Day of Week
combined_data$Weekday <- weekdays(combined_data$Date)
# Change Group Names
combined_data$group <- gsub("average_bidding", "Average Bidding",
gsub("maximum_bidding", "Maximum Bidding", combined_data$group))
# ----------------------- Totals
# Select Conversion Variable to Include
monthly_data <- combined_data %>%
group_by(group,variable) %>%
summarize(sum = sum(value))
# Define Function
plot_sum_by_variable <- function(monthly_data, include_vars) {
# Subset the data to only include the specified variables
monthly_data <- monthly_data[monthly_data$variable %in% include_vars, ]
# Plot the selected data
ggplot(monthly_data, aes(x = group, y = sum, fill = group)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
geom_text(aes(label = ifelse(variable == "Spend (USD)", paste0("$", format(round(sum), big.mark = ",")), format(round(sum), big.mark = ","))),
position = position_dodge(width = 1),
vjust = 0.5, size = 3,
hjust = 0,
size = 3) +
scale_fill_manual(values = c("#ADD8E6", "#000080"),guide = FALSE) +
facet_wrap(~variable, scales = "free_y",ncol=4) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
plot.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()) +
labs(fill = "") +
expand_limits(y = c(0, max(monthly_data$sum)*1.3))
}
# ----------------------- KPI'S --> Cost
cost_data <- combined_data %>%
group_by(group,variable) %>%
summarize(sum = sum(value)) %>%
mutate(cost = ifelse(variable != "Spend (USD)", sum(sum[variable == "Spend (USD)"]) / sum, NA),
cost = round(cost, 2)) %>%
filter(variable != "Spend (USD)")
# Define Function
plot_cost_by_variable <- function(cost_data, include_cost_vars) {
# Subset the data to only include the specified variables
cost_data <- cost_data[cost_data$variable %in% include_cost_vars, ]
# Plot the selected data
ggplot(cost_data, aes(x = group, y = cost, fill = group)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0("$", format(cost))),
position = position_dodge(width = 1),
vjust = 0.5, size = 3,
hjust = 0,
size = 3) +
scale_fill_manual(values = c("#ADD8E6", "#000080"), guide = FALSE) +
facet_wrap(~variable, scales = "free_y", ncol = 4) +
theme_minimal() +
coord_flip() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
plot.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()) +
labs(fill = "") +
expand_limits(y = c(0, max(cost_data$cost)*1.3))
}
plot_cost_by_variable(cost_data, include_cost_vars)
library(shiny)
library(ggplot2)
source("visualizations.R")
library(shiny)
library(shinydashboard)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "A/B Test Dashboard"),
dashboardSidebar(
sidebarMenu(
checkboxGroupInput("variables", "Variables",
choices = c("Spend (USD)", "Impressions", "Reach", "Website Clicks", "Searches", "View Content", "Add to Cart", "Purchase"),
selected = c("Spend (USD)", "Purchase")),
checkboxGroupInput("costs", "Costs",
choices = c("Impressions", "Reach", "Website Clicks", "Searches", "View Content", "Add to Cart", "Purchase"),
selected = c("Impressions", "Purchase")),
checkboxGroupInput("funnel_type",
"Funnel:",
choices = c("Retention", "Impressions", "Cost", "Count"),
selected = c("Cost"))
)
),
dashboardBody(
h4(paste0("Groups")),
fluidRow(
box(title = "Control | Average Bidding", width = 4, background = "light-blue"),
box(title = "Test | Maximum Bidding", width = 4, background = "navy"),
),
h4(paste0("Totals")),
fluidRow(
box(title = "View",
width = 6,
plotOutput("totals_plot")),
box(title = "Analysis",
width = 6,
plotOutput("totals_analysis_plot"))
),
h4(paste0("Costs")),
fluidRow(
box(width = 6,
plotOutput("costs_plot"))
),
h4(paste0("Funnels")),
fluidRow(
box(width = 6,
conditionalPanel(condition = "input.funnel_type.indexOf('Retention') > -1", plotOutput("retention_funnel_plot")),
conditionalPanel(condition = "input.funnel_type.indexOf('Impressions') > -1", plotOutput("impressions_funnel_plot")),
conditionalPanel(condition = "input.funnel_type.indexOf('Cost') > -1", plotOutput("cost_funnel_plot")),
conditionalPanel(condition = "input.funnel_type.indexOf('Count') > -1", plotOutput("count_funnel_plot"))
)
)
)
)
library(shiny)
library(ggplot2)
source("visualizations.R")
runApp('Downloads/7 R.R/*R-Project/R-Shiny-App----A-B-Test-Analysis/AB_Test')
