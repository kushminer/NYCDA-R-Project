group_by(group) %>%
summarize(normal_vars = paste(variable, collapse = ", "))
sw_summary
# Anderson Darling Test
#  The null hypothesis is that the data comes from a specified distribution, typically the normal distribution
#  If the p-value is less than the significance level, usually 0.05,
#  then the null hypothesis is rejected, indicating that the data is not normally distributed.
# Function
anderson_darling <- function(data) {
# Group the data by variable and group, and calculate the Anderson-Darling test statistic and p-value for each group
ad_results <- data %>%
group_by(variable, group) %>%
summarize(test_statistic = ad.test(value)$statistic,
p_value = ad.test(value)$p.value) %>%
arrange(group)
return(ad_results)
}
anderson_darling(combined_data)
# Summarize in text
anderson_darling_summary <- anderson_darling(combined_data) %>%
filter(p_value <= 0.05) %>%
group_by(group) %>%
arrange(group) %>%
summarize(normal_vars = paste(variable, collapse = ", "))
anderson_darling_summary
#To check if a data set is normally distributed, you can use:
# Q-Q plot: A Q-Q plot (Quantile-Quantile plot) is a graphical method to compare the distribution of a sample data with a theoretical normal distribution. If the data points on the Q-Q plot fall on or close to the diagonal line, it suggests that the data are normally distributed.
# Histogram: A histogram is a graphical representation of the distribution of the data. If the histogram has a bell-shaped curve and is approximately symmetric, then it suggests that the data are normally distributed.
# Density plot: A density plot is a smoothed version of the histogram, which shows the distribution of the data. A normal distribution has a characteristic bell shape, so if the density plot looks like a bell curve, it suggests that the data are normally distributed.
# Box plot: A box plot is a graphical method to show the distribution of the data. If the box plot is roughly symmetrical with the median line in the center and the whiskers are of similar length, it suggests that the data are normally distributed.
# It's worth noting that these methods are not conclusive and can only provide an indication of whether the data may be normally distributed. To obtain a more precise conclusion, statistical tests such as the Shapiro-Wilk test can be used.
anderson_darling_summary
sw_summary
anderson_darling_summary
sw_summary # shapiro_wilk
library(shiny)
library(ggplot2)
library(plotly)
source("visualizations.R")
source("cost_per_var.R")
source("count_per_var.R")
# source("analysis_summary.R")
# Define server
server <- function(input, output) {
# ------------ Conversion Rate
# Daily Conversion Rate Plot
output$daily_kpi_values_plot <- renderPlotly({
if (length(input$kpi) == 0) {
return(NULL)
}
selected_var <- input$kpi
plot_daily_values_2(conversion_rate_per_var, selected_var)
})
# Cumulative Conversion Rate
output$plot_kpi_sums <- renderPlot({
if (length(input$kpi) == 0) {
return(NULL)
}
daily_kpis <- input$kpi
plot_kpi_sums(combined_data, daily_kpis)
})
# Conversion Rate DataFrame
output$conversion_rate_table <- renderTable({
conversion_rate_dataframe
}, rownames = FALSE)
# ------------ KEY METRICS
# Daily Key Metrics Plot
output$daily_values_plot <- renderPlotly({
if (length(input$raw_metric) == 0) {
return(NULL)
}
include_daily_vars <- input$raw_metric
plot_daily_values(combined_data, include_daily_vars)
})
# Cumulative Key Metrics Plot
output$group_sums_plot <- renderPlot({
if (length(input$raw_metric) == 0) {
return(NULL)
}
include_daily_vars <- input$raw_metric
plot_group_sums(combined_data, include_daily_vars)
})
# Key Metrics DataFrame
output$key_metrics_table <- renderTable({
key_metrics
}, rownames = FALSE)
# ------------ KEY COST METRICS
# Daily Key Cost Metrics Plot
output$daily_cost_metrics_plot <- renderPlotly({
if (length(input$cost_metric) == 0) {
return(NULL)
}
selected_cost_metric <- input$cost_metric
daily_cost_metrics_plot(daily_cost_metrics, selected_cost_metric)
})
# Cumulative Key Metrics Plot
output$cumulative_cost_plot <- renderPlot({
if (length(input$cost_metric) == 0) {
return(NULL)
}
selected_cost_metric <- input$cost_metric
accumulative_cost_metrics(total_cost_metrics,selected_cost_metric)
})
# Key Metrics DataFrame
output$cost_metrics_table <- renderTable({
wide_total_cost_metrics
}, rownames = FALSE)
}
shiny::shinyApp(ui = ui, server = server)
anderson_darling_summary
sw_summary # shapiro_wilk
library(shiny)
library(shinydashboard)
source("visualizations.R")
source("ui.r_text.R")
#source("daily_plots.R")
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "A/B Test Dashboard"),
dashboardSidebar(
sidebarMenu(id = "tabs",
menuItem('Google Ads: Bidding Strategy',
menuSubItem("Test Introduction", tabName = "test_introduction", icon = icon("info-circle")),
menuSubItem("Conversion Metrics", tabName = "conversion", icon = icon("percent")),
menuSubItem("Key Metrics", tabName = "key_metrics", icon = icon("key")),
menuSubItem("Cost Metrics", tabName = "cost_metrics", icon = icon("dollar"))
)
)
),
dashboardBody(
# Independent Scrolling
tags$style(type = "text/css", "
.content-wrapper {
overflow-y: scroll;
height: calc(100vh - 80px);
}
.sidebar {
overflow-y: scroll;
height: calc(100vh - 80px);
}
"),
tags$head(
# Text and Box alignment
tags$style(HTML("
h1 {
text-align: center;
}
h3 {
font-size: 24px;
text-align: center;
}
.box {
display: flex;
flex-direction: column;
justify-content: center;
text-align: center;
}
"
)
)
),
tabItems(
tabItem(tabName = "overview",
fluidRow(
box(title = "Google Ads: Bidding Strategy", width = 12, background = "navy"),
box(width = 6, style = "background-color: #ADD8E6; border: none;", "Average Bidding"),
box(width = 6, style = "background-color: #000080; border: none; color: white;", "Maximum Bidding")
)
),
tabItem(tabName = "test_introduction",
fluidRow(
box(title = "Google Ads: Bidding Strategy", width = 12, background = "navy")
),
h1("Test Introduction"),
p("A company recently introduced a new bidding type, “average bidding”, as an alternative to its existing bidding type, called “maximum bidding”."),
p("One of our clients, ….com, has decided to test this new feature."),
p("To test, the client would like to to conduct an A/B test to understand if average bidding brings more conversions than maximum bidding."),
p("It's worth noting that the context of dataset is limited, still, we will do our best to draw the most meaningful insights possible"),
h4("Link to Test Data"),
a(href = "https://www.kaggle.com/datasets/ilkeryildiz/example-dataset-for-ab-test?resource=download", "Kaggle"),
h3("Average Bidding"),
p("Also known as: Maximum Clicks or Automated Bid Strategy"),
p("Description: Set an average daily budget, and the Google Ads system automatically manages your bids to bring the most clicks possible within your budget."),
p("Example: You have a website that sells a variety of art supplies, and your main goal is to bring more customers to your site. You have a set amount that you want to spend on advertising each month, and there isn't a particular product you want to emphasize most. Maximize Clicks lets you decide the overall amount of your budget, then we'll find you the most customers based on that."),
h3("Maximum Bidding"),
p("Also known as: Manual CPC bidding"),
p("Description: Manage your maximum cost per click. You can set different bids for each ad group in your campaign, or for individual keywords or placements. If you’ve found certain keywords or placements are more profitable, you can use manual bidding to allocate more of your ad budget to those keywords or placements."),
p("Example: Although your website sells a wide range of art supplies, you're most interested in selling paint brushes. With Manual CPC bidding, even if your ad group has 15 keywords, you can choose to set a higher bid for only the keyword \"paint brushes,\" which will apply whenever that keyword triggers your ad."),
h4("Link to Bidding Strategy Info"),
a(href = "https://support.google.com/google-ads/answer/2472725?hl=en", "Google"),
h2("Data Housekeeping", align = "center"),
h4("NaN Values"),
p("During the analysis, we found that Average bidding was missing values for 8/5/2019. To balance the data, we decided to remove the same data from Maximum bidding."),
p("We considered other options, such as imputing the missing data or using a different time period for the analysis, but decided that removing the data was the most balanced option."),
p("Removing a line of data from 30 rows may seem drastic, but it ensures that the comparison between the two bidding strategies is based on the same time period and does not introduce bias into the analysis."),
p("We acknowledge that this decision may have some impact on the accuracy of the results, but we believe that it was the most reasonable choice given the circumstances."),
),
tabItem(tabName = "conversion",
fluidRow(
box(title = "Google Ads: Bidding Strategy", width = 12, background = "navy"),
box(width = 6, style = "background-color: #ADD8E6; border: none;", "Average Bidding"),
box(width = 6, style = "background-color: #000080; border: none; color: white;", "Maximum Bidding")
),
h1("Conversion Metrics",align = "center"),
fluidRow(
column(width = 2, selectInput("kpi", "Conversion Metric",
choices = c("Clickthrough Rate" = "CTR_R", "Purchase Rate" = "PR_R", "Cart Completion Rate" = "PR_ATC"),
selected = "CTR_R")),
column(width = 7, offset = 0, box(plotlyOutput("daily_kpi_values_plot"), width = "100%")),
column(width = 3, box(plotOutput("plot_kpi_sums"),width = "100%"))
),
fluidRow(
column(width = 2),
column(width = 7, box(tableOutput("conversion_rate_table"), width = "100%")),
column(width = 3)
),
h3("Dictionary"),
p("Clickthrough Rate: Website Clicks /Impressions"),
p("Purchase Rate: Purchases / Impressions"),
p("Cart Completion Rate: Purchases / add to carts."),
p("Lift: Percentage that Average Bidding is less or more than Maximum Bidding"),
p("p-value: Determined using Wilcox Rank Sum Test, indicates if difference between Average and Maximum Bidding is Significant. Uses Daily Values for Analysis"),
p("Win Probability: The probability at which average bidding will win in the future. Uses Monte Carlo Simulation")
),
tabItem(tabName = "key_metrics",
fluidRow(
box(title = "Google Ads: Bidding Strategy", width = 12, background = "navy"),
box(width = 6, style = "background-color: #ADD8E6; border: none;", "Average Bidding"),
box(width = 6, style = "background-color: #000080; border: none; color: white;", "Maximum Bidding")
),
fluidRow(
h1("Key Metrics",align = "center"),
column(width = 2, selectInput("raw_metric", "Key Metric",
choices = c("Impressions","Website Clicks","Purchase"),
selected = c("Impressions"))),
column(width = 7, offset = 0, box(plotlyOutput("daily_values_plot"), width = "100%")),
column(width = 3, box(plotOutput("group_sums_plot"),width = "100%"))
),
fluidRow(
column(width = 2),
column(width = 7, box(tableOutput("key_metrics_table"), width = "100%")),
column(width = 3)
),
h3("Dictionary"),
p("Impressions: Number of Ad Views"),
p("Website Clicks: Number of Clicks on the Ad"),
p("Purchase: Number of Purchases"),
p("Lift: Percentage that Average Bidding is less or more than Maximum Bidding"),
p("p-value: Determined using Wilcox Rank Sum Test, indicates if difference between Average and Maximum Bidding is Significant. Uses Daily Values for Analysis"),
),
tabItem(tabName = "cost_metrics",
fluidRow(
box(title = "Google Ads: Bidding Strategy", width = 12, background = "navy"),
box(width = 6, style = "background-color: #ADD8E6; border: none;", "Average Bidding"),
box(width = 6, style = "background-color: #000080; border: none; color: white;", "Maximum Bidding")
),
fluidRow(
h1("Cost Metrics",align = "center"),
column(width = 2, selectInput("cost_metric", "Cost Metric",
choices = c("Spend",
"Cost per Purchase" = "CPP",
"Cost per Impression" = "CPI",
"Cost per Click" = "CPC"),
selected = c("Spend"))),
column(width = 7, offset = 0, box(plotlyOutput("daily_cost_metrics_plot"), width = "100%")),
column(width = 3, box(plotOutput("cumulative_cost_plot"),width = "100%"))
),
fluidRow(
column(width = 12, box(tableOutput("cost_metrics_table"), width = "100%"))
),
h3("Dictionary"),
p("Spend: Dollars spent"),
p("Cost per Purchase: Amount Spent / Number of Purchases"),
p("Cost per Click: Amount Spent / Number of Website Clicks"),
p("Cost per Impression: Amount Spent / Number of Impressions"),
p("Lift: Percentage that Average Bidding is less or more than Maximum Bidding"),
p("p-value: Determined using Wilcox Rank Sum Test, indicates if difference between Average and Maximum Bidding is Significant. Uses Daily Values for Analysis"),
p("Win Probability: The probability at which average bidding will win in the future. Uses Monte Carlo Simulation")
)
)
)
)
anderson_darling_summary
sw_summary # shapiro_wilk
library(shiny)
library(ggplot2)
library(plotly)
source("visualizations.R")
source("cost_per_var.R")
source("count_per_var.R")
# source("analysis_summary.R")
# Define server
server <- function(input, output) {
# ------------ Conversion Rate
# Daily Conversion Rate Plot
output$daily_kpi_values_plot <- renderPlotly({
if (length(input$kpi) == 0) {
return(NULL)
}
selected_var <- input$kpi
plot_daily_values_2(conversion_rate_per_var, selected_var)
})
# Cumulative Conversion Rate
output$plot_kpi_sums <- renderPlot({
if (length(input$kpi) == 0) {
return(NULL)
}
daily_kpis <- input$kpi
plot_kpi_sums(combined_data, daily_kpis)
})
# Conversion Rate DataFrame
output$conversion_rate_table <- renderTable({
conversion_rate_dataframe
}, rownames = FALSE)
# ------------ KEY METRICS
# Daily Key Metrics Plot
output$daily_values_plot <- renderPlotly({
if (length(input$raw_metric) == 0) {
return(NULL)
}
include_daily_vars <- input$raw_metric
plot_daily_values(combined_data, include_daily_vars)
})
# Cumulative Key Metrics Plot
output$group_sums_plot <- renderPlot({
if (length(input$raw_metric) == 0) {
return(NULL)
}
include_daily_vars <- input$raw_metric
plot_group_sums(combined_data, include_daily_vars)
})
# Key Metrics DataFrame
output$key_metrics_table <- renderTable({
key_metrics
}, rownames = FALSE)
# ------------ KEY COST METRICS
# Daily Key Cost Metrics Plot
output$daily_cost_metrics_plot <- renderPlotly({
if (length(input$cost_metric) == 0) {
return(NULL)
}
selected_cost_metric <- input$cost_metric
daily_cost_metrics_plot(daily_cost_metrics, selected_cost_metric)
})
# Cumulative Key Metrics Plot
output$cumulative_cost_plot <- renderPlot({
if (length(input$cost_metric) == 0) {
return(NULL)
}
selected_cost_metric <- input$cost_metric
accumulative_cost_metrics(total_cost_metrics,selected_cost_metric)
})
# Key Metrics DataFrame
output$cost_metrics_table <- renderTable({
wide_total_cost_metrics
}, rownames = FALSE)
}
shiny::shinyApp(ui = ui, server = server)
anderson_darling_summary
sw_summary # shapiro_wilk
library(shiny)
library(ggplot2)
library(plotly)
source("visualizations.R")
source("cost_per_var.R")
source("count_per_var.R")
# source("analysis_summary.R")
# Define server
server <- function(input, output) {
# ------------ Conversion Rate
# Daily Conversion Rate Plot
output$daily_kpi_values_plot <- renderPlotly({
if (length(input$kpi) == 0) {
return(NULL)
}
selected_var <- input$kpi
plot_daily_values_2(conversion_rate_per_var, selected_var)
})
# Cumulative Conversion Rate
output$plot_kpi_sums <- renderPlot({
if (length(input$kpi) == 0) {
return(NULL)
}
daily_kpis <- input$kpi
plot_kpi_sums(combined_data, daily_kpis)
})
# Conversion Rate DataFrame
output$conversion_rate_table <- renderTable({
conversion_rate_dataframe
}, rownames = FALSE)
# ------------ KEY METRICS
# Daily Key Metrics Plot
output$daily_values_plot <- renderPlotly({
if (length(input$raw_metric) == 0) {
return(NULL)
}
include_daily_vars <- input$raw_metric
plot_daily_values(combined_data, include_daily_vars)
})
# Cumulative Key Metrics Plot
output$group_sums_plot <- renderPlot({
if (length(input$raw_metric) == 0) {
return(NULL)
}
include_daily_vars <- input$raw_metric
plot_group_sums(combined_data, include_daily_vars)
})
# Key Metrics DataFrame
output$key_metrics_table <- renderTable({
key_metrics
}, rownames = FALSE)
# ------------ KEY COST METRICS
# Daily Key Cost Metrics Plot
output$daily_cost_metrics_plot <- renderPlotly({
if (length(input$cost_metric) == 0) {
return(NULL)
}
selected_cost_metric <- input$cost_metric
daily_cost_metrics_plot(daily_cost_metrics, selected_cost_metric)
})
# Cumulative Key Metrics Plot
output$cumulative_cost_plot <- renderPlot({
if (length(input$cost_metric) == 0) {
return(NULL)
}
selected_cost_metric <- input$cost_metric
accumulative_cost_metrics(total_cost_metrics,selected_cost_metric)
})
# Key Metrics DataFrame
output$cost_metrics_table <- renderTable({
wide_total_cost_metrics
}, rownames = FALSE)
}
shiny::shinyApp(ui = ui, server = server)
calculate_cost_win_probability <- function(cost_variable_pairs) {
results <- data.frame()
for (pair in cost_variable_pairs) {
daily_data <- combined_data %>%
filter(variable %in% c(pair[1], pair[2]))
daily_ctr <- daily_data %>%
group_by(Date, group, variable) %>%
summarize(sum = sum(value), .groups = 'drop') %>%
spread(key = variable, value = sum) %>%
mutate(CTR = !!sym(pair[1]) / !!sym(pair[2]))
win_probability_daily <- daily_ctr %>%
group_by(Date) %>%
do({
group_A <- filter(., group == "Average Bidding")
group_B <- filter(., group == "Maximum Bidding")
successes_A <- group_A %>% pull(!!sym(pair[1]))
trials_A <- group_A %>% pull(!!sym(pair[2]))
successes_B <- group_B %>% pull(!!sym(pair[1]))
trials_B <- group_B %>% pull(!!sym(pair[2]))
n_samples <- 10000
if (all(!is.na(successes_A) & !is.na(trials_A) & !is.na(successes_B) & !is.na(trials_B))) {
samples_A <- rbeta(n_samples, shape1 = successes_A + 1, shape2 = trials_A - successes_A + 1)
samples_B <- rbeta(n_samples, shape1 = successes_B + 1, shape2 = trials_B - successes_B + 1)
win_probability_B <- mean(samples_B > samples_A)
} else {
win_probability_B <- NA
}
data.frame(Date = unique(group_A$Date), KPI = paste(pair[1], pair[2], sep = "_"), win_prob_average_bidding = win_probability_B)
})
average_win_probability_A <- mean(win_probability_daily$win_prob_average_bidding, na.rm = TRUE)
results <- rbind(results, data.frame(KPI = paste(pair[1], pair[2], sep = "_"), win_prob_average_bidding = average_win_probability_A))
}
return(results)
}
cost_variable_pairs <- list(
c("Spend (USD)","Impressions"),
c("Spend (USD)","Website Clicks"),
c("Spend (USD)","Purchase"),
c("Purchase","Spend (USD)"))
# conversion_win_prob <-
cost_win_probability <- calculate_cost_win_probability(cost_variable_pairs)
cost_variable_pairs <- list(
c("Spend (USD)","Impressions"),
c("Spend (USD)","Website Clicks"),
c("Spend (USD)","Purchase"),
c("Purchase","Spend (USD)"))
# conversion_win_prob <-
cost_win_probability <- calculate_cost_win_probability(cost_variable_pairs)
# extract the number of Website Clicks and Impressions for each group:
clicks_impressions <- combined_data %>%
filter(variable %in% c("Website Clicks", "Impressions")) %>%
group_by(group, variable) %>%
summarize(sum = sum(value))
#extract the number of successes (Website Clicks) and trials (Impressions) for each group:
successes_A <- clicks_impressions %>%
filter(group == "Average Bidding", variable == "Website Clicks") %>%
pull(sum)
trials_A <- clicks_impressions %>%
filter(group == "Average Bidding", variable == "Impressions") %>%
pull(sum)
trials_A <- clicks_impressions %>%
filter(group == "Average Bidding", variable == "Impressions") %>%
pull(sum)
successes_B <- clicks_impressions %>%
filter(group == "Maximum Bidding", variable == "Website Clicks") %>%
pull(sum)
trials_B <- clicks_impressions %>%
filter(group == "Maximum Bidding", variable == "Impressions") %>%
pull(sum)
# Set the number of samples
n_samples <- 1000000
# Generate samples from the Beta distribution for each group / Monte Carlo Simulation
samples_A <- rbeta(n_samples, shape1 = successes_A + 1, shape2 = trials_A - successes_A + 1)
samples_B <- rbeta(n_samples, shape1 = successes_B + 1, shape2 = trials_B - successes_B + 1)
# Calculate the win probability for Maximum Bidding
win_probability_B <- mean(samples_B > samples_A)
# Display the win probability
cat("Win probability for Maximum Bidding:", paste0(win_probability_B*100,"%"), "\n")
